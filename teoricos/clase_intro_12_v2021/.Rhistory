install.packages('tidyverse')
library(tidyverse)
install.packages('googledrive')
install.packages('httr')
install.packages("tidyverse")
install.packages("rvest")
install.packages("tidyverse")
library(tidyverse)
library(seqinr)
install.packages('seqin')
install.packages('seqinr')
library(seqinr)
help(seqinr::GC)
help(GC)
help(body)
body(body)
body(if)
if
sum
if
()
if()
help(if)
`if`
install
install.packages('tinytex')
library(tinytex)
tinytex::install_tinytex()
library(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github("hadley/emo")
`c`
# defino una funcion e imprimo su environment
la_primera = function(numero){
# genero una funcion interna
la_segunda = function(numero){
# toma el numero, lo eleva al cuadrado y devuelve eso
return(numero^2)
}
# devuelve
return(c(la_segunda(numero = numero), environment(la_segunda)))
}
la_primera(2)
environment(la_primera)
# defino una funcion e imprimo su environment
la_primera = function(numero){
# defino una funcion e imprimo su environment
# genero una funcion interna
la_segunda = function(numero){
# toma el numero, lo eleva al cuadrado y devuelve eso
return(numero^2)
}
esas = 'assad'
# devuelve
return(c(la_segunda(numero = numero), environment(la_segunda), environment(esas))
}
la_primera(2)
environment(la_primera)
# defino una funcion e imprimo su environment
la_primera = function(numero){
# genero una funcion interna
la_segunda = function(numero){
# toma el numero, lo eleva al cuadrado y devuelve eso
return(numero^2)
}
esas = 'assad'
# devuelve
return(c(la_segunda(numero = numero), environment(la_segunda), environment(esas)))
}
la_primera(2)
environment(la_primera)
environment(opa)
opa = 'esas'
environment(opa)
y <- 10
h02 <- function(x) {
y <- 100
x + 1
}
h02(y)
h03 = function(x){
y= 100
x =3
x+1
}
h02(y)
h03(y)
h04 <- function(x = 1, y = x * 2, z = a + b) {
a <- 10
b <- 100
c(x, y, z)
}
h04()
a = 20
h04()
help(runif)
5L
`[`
`]`
`c`
`=`
body(c)
environment(c)
library(prettydoc)
install.packages("prettydoc")
epa = 'sabe'
class(epa)
type(epa)
typeof(epa)
eleva_y_resta = function(x, y){}
eleva_y_resta = function(x, y){
resultado = x^2 - y^2
return(resultado)
}
eleva_y_resta(x = 2, y = 3)
body(eleva_y_resta)
# voy a definir funcion que eleva y resta dos argumentos
eleva_y_resta = function(x, y){
resultado = x^2 - y^2
return(resultado)
}
# Se define la funcion multiplica_por_cuatro, la cual tiene como argumento un numero.
multiplica_por_cuatro = function(numero){
# se guarda el resultado de multiplicar a la variable numero por 4
resultado <- numero * 4
# se devuelve al usuario el resultado
return(resultado)
}
# eto es un comentario nunca se va a ejecutar
eto es un comentario nunca se va a ejecutar
# eto es un comentario nunca se va a ejecutar
multiplica_por_cuatro(numero = 1)
multiplica_por_cuatro(numero = 2)
# se utiliza la funcion con diferentes numeros, y se guardan los resultados en
# variables
resultado_1 = multiplica_por_cuatro(numero = 1)
resultado_3 = multiplica_por_cuatro(numero = 3)
resultado_1
resultado_3
help(paste)
paste0(1:12)
intento_uno = paste0(1:12)
intento_uno
intento_uno[1]
intento_uno[2]
intento_uno[3]
class(intento_uno)
1:12
paste(1:12)
paste('a', 'b')
paste('a', 'b', 'c')
saludo("Sofia")
"nombre"
"Saludo"
help(sqrt)
sqrt(4)
sqrt(9)
2^2
3^2
5^2
raiz = function (numero){
resultado <- sqrt(numero) return(resultado)
}
raiz = function (numero){
resultado <- sqrt(numero)
return(resultado)
}
raiz(9)
class(3)
class("alberto")
class(3)
numero
# voy a hacer pruebas
# defino variable numero
numero = 3
numero
class(numero)
class(numero) == "numeric"
# pruebo si funciona cuando <numero> no es un numero
numero = 'alberto'
numero
class(numero)
class(numero) == "numeric"
# primera forma: si <numero> es "numeric" -> ejecuto funcion; else largo un cartel
raiz = function (numero){
if(class(numero) == "numeric"){ # aca tenemos que evaluar que numero sea de class "numeric"
resultado <- sqrt(numero)
return(resultado)
} else {
# devuelvo mensaje de aviso
paste("Non numeric")
}
}
raiz(9)
raiz(numero = 'otracosa')
raiz('otracosa')
# primera forma: si <numero> es "numeric" -> ejecuto funcion; else largo un cartel
raiz = function (numero){
if(class(numero) == "numeric"){ # aca tenemos que evaluar que numero sea de class "numeric"
resultado <- sqrt(numero)
return(resultado)
} else {
# devuelvo mensaje de aviso
paste("Atencion: No se pueden computar raices cuadradas de cosas que no son numeros!")
}
}
raiz('otracosa')
class(3)
class("caja")
class(TRUE)
class(3)
class(3)
class(3) == "numeric"
class("caja") == "numeric"
class("caja")
letters
help(s2c)
library(seqinr)
help(s2c)
"vaca"
s2c("vaca")
help(grep)
vector_ejemplo = c('a', 'b', 'c')
vector_ejemplo
grep(pattern = 'd', x = vector_ejemplo)
grep(pattern = 'a', x = vector_ejemplo)
vector_ejemplo = c('b', 'a', 'c')
vector_ejemplo
grep(pattern = 'b', x = vector_ejemplo)
grep(pattern = 'b', 'c', x = vector_ejemplo)
grep(pattern = c('b', 'c'), x = vector_ejemplo)
n_tel_nombre = function(nombre, tel){
data_frame = data.frame('numero' = 1:length(nombre), nombre, tel)
return(data_frame)
}
n_tel_nombre = function(nombre, tel){
data_frame = data.frame('numero' = 1:length(nombre), nombre, tel)
return(data_frame)
}
nombres = c('Juan', 'Sofia')
telefonos = c(22222, 333333)
n_tel_nombre(nombre = nombres, tel = telefonos)
n_tel_nombre = function(nombre, tel){
if(length(nombre) == length(tel)) {
data_frame = data.frame('numero' = 1:length(nombre), nombre, tel)
return(data_frame)
} else {
paste("Mensaje de error")
}
}
nombres = c('Juan', 'Sofia')
telefonos = c(22222, 333333)
n_tel_nombre(nombre = nombres, tel = telefonos)
nombres = c('Juan', 'Sofia')
telefonos = c(22222, 333333, 2838232)
n_tel_nombre(nombre = nombres, tel = telefonos)
install.packages("GGally")
library(ggtree)
library("ggtree")
install.packages("ggtree")
library(BiocManager)
install.packages("BiocManager")
BiocManager::install('ggtree')
install.packages('magick')
iris
iris %>% as_tibble()
library(magrittr)
library(tidyverse)
iris %>% as_tibble()
iris
iris[iris$Sepal.Length >= 3]
iris[iris$Sepal.Length >= 3,]
iris %>% .[.$Sepal.Length >= 3,]
getwd()
setwd("~/Documents/pracitcos_linea_de_comandos/teoricos/clase_intro_12_v2021")
"../../imgs/"
help(plot_grid)
library(knitr)
library(magick)
library(cowplot)
help(plot_grid)
